// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package us.ihmc.remotecaptury;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.remotecaptury.global.remotecaptury.*;


@Properties(inherit = us.ihmc.remotecaptury.RemoteCapturyConfig.class)
public class CapturyCamera extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CapturyCamera() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CapturyCamera(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CapturyCamera(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CapturyCamera position(long position) {
        return (CapturyCamera)super.position(position);
    }
    @Override public CapturyCamera getPointer(long i) {
        return new CapturyCamera((Pointer)this).offsetAddress(i);
    }

	public native @Cast("char") byte name(int i); public native CapturyCamera name(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer name();
	public native int id(); public native CapturyCamera id(int setter);
	public native @Name("position") float _position(int i); public native CapturyCamera _position(int i, float setter);
	@MemberGetter public native @Name("position") FloatPointer _position();
	public native float orientation(int i); public native CapturyCamera orientation(int i, float setter);
	@MemberGetter public native FloatPointer orientation();
	public native float sensorSize(int i); public native CapturyCamera sensorSize(int i, float setter);
	@MemberGetter public native FloatPointer sensorSize();	// in mm
	public native float focalLength(); public native CapturyCamera focalLength(float setter);	// in mm
	public native float lensCenter(int i); public native CapturyCamera lensCenter(int i, float setter);
	@MemberGetter public native FloatPointer lensCenter();	// in mm
	public native @Cast("char") byte distortionModel(int i); public native CapturyCamera distortionModel(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer distortionModel(); // name of distortion model or "none"
	public native float distortion(int i); public native CapturyCamera distortion(int i, float setter);
	@MemberGetter public native FloatPointer distortion();

	// the following can be computed from the above values and are provided for convenience only
	// the matrices are stored column wise:
	// 0  3  6  9
	// 1  4  7 10
	// 2  5  8 11
	public native float extrinsic(int i); public native CapturyCamera extrinsic(int i, float setter);
	@MemberGetter public native FloatPointer extrinsic();
	public native float intrinsic(int i); public native CapturyCamera intrinsic(int i, float setter);
	@MemberGetter public native FloatPointer intrinsic();
}
